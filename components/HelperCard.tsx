
import React, { useState } from 'react';
import type { EnrichedHelperProfile } from '../types'; 
import { GenderOption, HelperEducationLevelOption, View } from '../types'; 
import { Button } from './Button';
import { Modal } from './Modal';
import type { Timestamp } from 'firebase/firestore';

interface HelperCardProps {
  profile: EnrichedHelperProfile; 
  onNavigateToPublicProfile: (userId: string) => void; 
  navigateTo: (view: View) => void; 
  onLogHelperContact: (helperProfileId: string) => void; 
}

const FallbackAvatarDisplay: React.FC<{ name?: string, size?: string }> = ({ name, size = "w-16 h-16" }) => {
  const initial = name ? name.charAt(0).toUpperCase() : 'üë§';
  return (
    <div className={`${size} rounded-full bg-neutral dark:bg-dark-inputBg flex items-center justify-center text-2xl text-white dark:text-dark-text shadow`}>
      {initial}
    </div>
  );
};

const calculateAge = (birthdateString?: string): number | null => {
  if (!birthdateString) return null;
  const birthDate = new Date(birthdateString); // Assumes YYYY-MM-DD
  if (isNaN(birthDate.getTime())) return null;
  const today = new Date();
  if (birthDate > today) return null;
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  return age;
};

const formatDateFromTimestamp = (timestamp?: Timestamp): string | null => {
  if (!timestamp) return null;
  try {
    const date = timestamp.toDate();
    return date.toLocaleDateString('th-TH', { day: 'numeric', month: 'short', year: 'numeric' });
  } catch (e) { return null; }
};

const formatDateDisplay = (dateString?: string): string | null => { // For YYYY-MM-DD strings
  if (!dateString) return null;
  try {
    const parts = dateString.split('-');
    if (parts.length === 3) {
      const year = parseInt(parts[0], 10);
      const month = parseInt(parts[1], 10) -1;
      const day = parseInt(parts[2], 10);
      const date = new Date(year, month, day);
      if (isNaN(date.getTime())) return dateString;
      return date.toLocaleDateString('th-TH', { day: 'numeric', month: 'short', year: 'numeric' });
    }
    return dateString;
  } catch (e) { return dateString; }
};

const TrustBadgesDisplay: React.FC<{ profile: EnrichedHelperProfile }> = ({ profile }) => {
  return (
    <div className="flex gap-1 flex-wrap my-2">
      {profile.verifiedExperienceBadge && (<span className="bg-yellow-200 text-yellow-800 dark:bg-yellow-600/30 dark:text-yellow-200 text-xs px-2 py-0.5 rounded-full font-medium">‚≠ê ‡∏ú‡πà‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô</span>)}
      {profile.profileCompleteBadge && (<span className="bg-green-100 text-green-700 dark:bg-green-700/30 dark:text-green-200 text-xs px-2 py-0.5 rounded-full font-medium">üü¢ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</span>)}
      {profile.hasBeenContactedBadge && (<span className="bg-blue-100 text-blue-700 dark:bg-blue-700/30 dark:text-blue-200 text-xs px-2 py-0.5 rounded-full font-medium">üìå ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</span>)}
      {(profile.interestedCount || 0) > 0 && (<span className="bg-blue-100 text-blue-700 dark:bg-blue-700/30 dark:text-blue-200 text-xs px-2 py-0.5 rounded-full font-medium">üìå ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Å‡∏î‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß {profile.interestedCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>)}
      {profile.warningBadge && (<span className="bg-red-100 text-red-700 dark:bg-red-700/30 dark:text-red-200 text-xs px-2 py-0.5 rounded-full font-medium">üî∫ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ</span>)}
    </div>
  );
};

export const HelperCard: React.FC<HelperCardProps> = ({ profile, onNavigateToPublicProfile, navigateTo, onLogHelperContact }) => {
  const [isContactModalOpen, setIsContactModalOpen] = useState(false);
  const [isWarningModalOpen, setIsWarningModalOpen] = useState(false);

  const handleContact = () => setIsWarningModalOpen(true);
  const closeContactModal = () => setIsContactModalOpen(false);
  const closeWarningModal = () => setIsWarningModalOpen(false);

  const handleProceedToContact = () => {
    onLogHelperContact(profile.id); // Pass HelperProfile ID
    setIsWarningModalOpen(false); 
    setIsContactModalOpen(true); 
  };
  
  const age = calculateAge(profile.birthdate);
  const availabilityDateFromText = formatDateDisplay(profile.availabilityDateFrom);
  const availabilityDateToText = formatDateDisplay(profile.availabilityDateTo);
  
  const postedAtDate = profile.postedAt ? profile.postedAt.toDate() : null;
  const formattedPostedAt = postedAtDate ? formatDateFromTimestamp(profile.postedAt) : null;
  
  const isExpired = !profile.isUnavailable && postedAtDate ? (new Date().getTime() - postedAtDate.getTime()) / (1000 * 60 * 60 * 24) > 30 : false;

  let availabilityDateDisplay = '';
  if (availabilityDateFromText && availabilityDateToText) availabilityDateDisplay = `${availabilityDateFromText} - ${availabilityDateToText}`;
  else if (availabilityDateFromText) availabilityDateDisplay = `‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${availabilityDateFromText}`;
  else if (availabilityDateToText) availabilityDateDisplay = `‡∏ñ‡∏∂‡∏á ${availabilityDateToText}`;

  const contactText = profile.contact;
  const useBoxStyleForContact = typeof contactText === 'string' && (contactText.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') || contactText.includes('LINE ID:') || contactText.includes('Facebook:'));
  const shortAddress = profile.userAddress ? profile.userAddress.split(',')[0] : null;

  return (
    <>
      <div className="bg-white dark:bg-dark-cardBg shadow-lg rounded-xl p-6 mb-6 border border-neutral-DEFAULT dark:border-dark-border hover:shadow-xl transition-shadow duration-300 flex flex-col h-full">
        {profile.isPinned && (<div className="mb-3 p-2 bg-yellow-100 dark:bg-dark-secondary-DEFAULT/30 border border-yellow-300 dark:border-dark-secondary-DEFAULT/50 rounded-md text-center"><p className="text-sm font-medium text-yellow-700 dark:text-dark-secondary-hover">üìå ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</p></div>)}
        {profile.isUnavailable && (<div className="mb-3 p-2 bg-red-100 dark:bg-red-700/30 border border-red-300 dark:border-red-500/50 rounded-md text-center"><p className="text-sm font-medium text-red-700 dark:text-red-300">üö´ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß</p></div>)}
        {profile.isSuspicious && !profile.warningBadge && (<div className="mb-3 p-2 bg-red-100 dark:bg-red-700/30 border border-red-300 dark:border-red-500/50 rounded-md text-center"><p className="text-sm font-medium text-red-700 dark:text-red-300">‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©</p></div>)}

        <div className="flex items-start mb-1">
          {profile.userPhotoURL ? (<img src={profile.userPhotoURL} alt={profile.userDisplayName} className="w-16 h-16 rounded-full object-cover mr-4 shadow" />) : (<FallbackAvatarDisplay name={profile.userDisplayName} />)}
          <div className="flex-1">
            <h3 className="text-2xl font-semibold text-secondary-hover dark:text-dark-secondary-hover">{profile.profileTitle}</h3>
            <p className="text-sm text-neutral-medium dark:text-dark-textMuted">‡πÇ‡∏î‡∏¢: @{profile.username}</p>
          </div>
        </div>
        <TrustBadgesDisplay profile={profile} />
        <div className="space-y-2 text-neutral-dark dark:text-dark-textMuted mb-4 flex-grow font-normal">
          {profile.gender && profile.gender !== GenderOption.NotSpecified && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡πÄ‡∏û‡∏®:</strong> {profile.gender}</p>)}
          {age !== null && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {age} ‡∏õ‡∏µ</p>)}
          {profile.educationLevel && profile.educationLevel !== HelperEducationLevelOption.NotStated && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</strong> {profile.educationLevel}</p>)}
          <p><strong className="font-medium text-neutral-dark dark:text-dark-text">üìç ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</strong> {profile.area}{shortAddress && `, ${shortAddress}`}</p>
          {availabilityDateDisplay && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">üóìÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</strong> {availabilityDateDisplay}</p>)}
          {profile.availabilityTimeDetails && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°):</strong> {profile.availabilityTimeDetails}</p>)}
          {profile.availability && (!availabilityDateDisplay || !profile.availabilityTimeDetails) && (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">üïí ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏):</strong> {profile.availability}</p>)}
          {useBoxStyleForContact ? (
            <div className="mt-2"><strong className="font-medium text-neutral-dark dark:text-dark-text">üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</strong><div className="mt-1 text-sm bg-neutral-light dark:bg-dark-inputBg dark:text-dark-text p-3 rounded-md whitespace-pre-wrap border border-neutral-DEFAULT/50 dark:border-dark-border/50">{contactText}</div></div>
          ) : (<p><strong className="font-medium text-neutral-dark dark:text-dark-text">üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</strong> {contactText}</p>)}
           <div className="mt-2"><strong className="font-medium text-neutral-dark dark:text-dark-text">üìù ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô:</strong><div className="mt-1 text-sm bg-neutral-light dark:bg-dark-inputBg dark:text-dark-text p-3 rounded-md whitespace-pre-wrap h-24 overflow-y-auto font-normal border border-neutral-DEFAULT/50 dark:border-dark-border/50">{profile.details || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}</div></div>
          {formattedPostedAt && (<p className="text-xs sm:text-sm text-neutral-medium dark:text-dark-textMuted mt-1 pt-2 border-t border-neutral-DEFAULT/30 dark:border-dark-border/20">üìÖ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formattedPostedAt}</p>)}
        </div>
         {isExpired && (<div className="text-center mt-3 mb-2"><span className="bg-red-100 text-red-700 dark:bg-red-700/30 dark:text-red-300 text-xs sm:text-sm px-3 py-1.5 rounded-full font-medium inline-block">‚õî ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span></div>)}
        <div className="mt-auto space-y-2">
            <Button onClick={() => onNavigateToPublicProfile(profile.userId)} variant="outline" colorScheme="secondary" size="md" className="w-full">üëÅÔ∏è ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°</Button>
            <Button onClick={handleContact} variant="secondary" size="md" className="w-full" disabled={profile.isUnavailable}>{profile.isUnavailable ? 'üö´ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß' : 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ'}</Button>
        </div>
      </div>
      
      <Modal isOpen={isWarningModalOpen} onClose={closeWarningModal} title="‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏°‡∏¥‡∏à‡∏â‡∏≤‡∏ä‡∏µ‡∏û">
        <div className="bg-accent/10 dark:bg-dark-accent-DEFAULT/10 border border-accent/30 dark:border-dark-accent-DEFAULT/30 p-4 rounded-md my-2 text-neutral-dark dark:text-dark-textMuted">
          <p className="mb-2">‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á <strong className="text-red-600 dark:text-red-400">‡∏´‡πâ‡∏≤‡∏°‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</strong> ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏ô‡∏±‡∏î‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
          <p>‡∏´‡∏≤‡∏à‡πä‡∏≠‡∏ö‡∏à‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ <button onClick={() => { closeWarningModal(); navigateTo(View.Safety);}} className="text-accent dark:text-dark-accent-DEFAULT hover:underline font-semibold">"‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"</button></p>
        </div>
        <Button onClick={handleProceedToContact} variant="accent" className="w-full mt-4">‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</Button>
      </Modal>

      <Modal isOpen={isContactModalOpen} onClose={closeContactModal} title="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢">
        <div className="text-neutral-dark dark:text-dark-textMuted font-normal">
          <p className="mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:</p>
          <div className="bg-neutral-light dark:bg-dark-inputBg p-4 rounded-md border border-neutral-DEFAULT dark:border-dark-border whitespace-pre-wrap">
            <p className="font-semibold text-neutral-dark dark:text-dark-text">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</p>
            <p>{profile.contact}</p>
          </div>
          <Button onClick={closeContactModal} variant="primary" className="w-full mt-6">‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ</Button>
        </div>
      </Modal>
    </>
  );
};
