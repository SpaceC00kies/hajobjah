import React, { useState } from 'react';
import type { HelperProfile } from '../types';
import { GenderOption, HelperEducationLevelOption } from '../types'; // Import for comparison if needed
import { Button } from './Button';
import { Modal } from './Modal';

interface HelperCardProps {
  profile: HelperProfile;
}

const calculateAge = (birthdateString?: string): number | null => {
  if (!birthdateString) return null;
  const birthDate = new Date(birthdateString);
  if (isNaN(birthDate.getTime())) return null;

  const today = new Date();
  if (birthDate > today) return null;

  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();

  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  return age;
};

const formatDateDisplay = (dateString?: string): string | null => {
  if (!dateString) return null;
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return null;
    return date.toLocaleDateString('th-TH', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });
  } catch (e) {
    return null;
  }
};

export const HelperCard: React.FC<HelperCardProps> = ({ profile }) => {
  const [isContactModalOpen, setIsContactModalOpen] = useState(false);
  const [isWarningModalOpen, setIsWarningModalOpen] = useState(false);

  const handleContact = () => {
    setIsWarningModalOpen(true); 
  };

  const closeContactModal = () => {
    setIsContactModalOpen(false);
  };

  const closeWarningModal = () => {
    setIsWarningModalOpen(false);
  };

  const handleProceedToContact = () => {
    setIsWarningModalOpen(false); 
    setIsContactModalOpen(true); 
  };
  
  const age = calculateAge(profile.birthdate);
  const availabilityDateFromText = formatDateDisplay(profile.availabilityDateFrom);
  const availabilityDateToText = formatDateDisplay(profile.availabilityDateTo);
  const postedAtDate = profile.postedAt ? new Date(profile.postedAt) : null;
  const formattedPostedAt = postedAtDate && !isNaN(postedAtDate.getTime()) ? formatDateDisplay(profile.postedAt) : null;
  
  const isExpired = !profile.isUnavailable && postedAtDate ? (new Date().getTime() - postedAtDate.getTime()) / (1000 * 60 * 60 * 24) > 30 : false;

  let availabilityDateDisplay = '';
  if (availabilityDateFromText && availabilityDateToText) {
    availabilityDateDisplay = `${availabilityDateFromText} - ${availabilityDateToText}`;
  } else if (availabilityDateFromText) {
    availabilityDateDisplay = `‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà ${availabilityDateFromText}`;
  } else if (availabilityDateToText) {
    availabilityDateDisplay = `‡∏ñ‡∏∂‡∏á ${availabilityDateToText}`;
  }

  const contactText = profile.contact;
  const useBoxStyleForContact = typeof contactText === 'string' && 
                                (contactText.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') || contactText.includes('LINE ID:') || contactText.includes('Facebook:'));

  return (
    <>
      <div className="bg-white dark:bg-dark-cardBg shadow-lg rounded-xl p-6 mb-6 border border-neutral-DEFAULT dark:border-dark-border hover:shadow-xl transition-shadow duration-300 flex flex-col h-full">
        {profile.isPinned && (
           <div className="mb-3 p-2 bg-yellow-100 dark:bg-dark-secondary-DEFAULT/30 border border-yellow-300 dark:border-dark-secondary-DEFAULT/50 rounded-md text-center">
            <p className="text-sm font-medium text-yellow-700 dark:text-dark-secondary-hover">
              üìå ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            </p>
          </div>
        )}
        {profile.isUnavailable && (
           <div className="mb-3 p-2 bg-green-100 dark:bg-green-700/30 border border-green-300 dark:border-green-500/50 rounded-md text-center">
            <p className="text-sm font-medium text-green-700 dark:text-green-300">
              ‚úÖ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            </p>
          </div>
        )}
        {profile.isSuspicious && (
          <div className="mb-3 p-2 bg-red-100 dark:bg-red-700/30 border border-red-300 dark:border-red-500/50 rounded-md text-center">
            <p className="text-sm font-medium text-red-700 dark:text-red-300">
              ‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
            </p>
          </div>
        )}
        <h3 className="text-2xl font-semibold text-secondary-hover dark:text-dark-secondary-hover mb-2">{profile.profileTitle}</h3>
        <div className="space-y-2 text-neutral-dark dark:text-dark-textMuted mb-4 flex-grow font-normal">
          {profile.gender && profile.gender !== GenderOption.NotSpecified && (
            <p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡πÄ‡∏û‡∏®:</strong> {profile.gender}</p>
          )}
          {age !== null && (
            <p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {age} ‡∏õ‡∏µ</p>
          )}
          {profile.educationLevel && profile.educationLevel !== HelperEducationLevelOption.NotStated && (
            <p><strong className="font-medium text-neutral-dark dark:text-dark-text">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</strong> {profile.educationLevel}</p>
          )}
          <p><strong className="font-medium text-neutral-dark dark:text-dark-text">üìç ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</strong> {profile.area}</p>
          
          {availabilityDateDisplay && (
             <p><strong className="font-medium text-neutral-dark dark:text-dark-text">üóìÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</strong> {availabilityDateDisplay}</p>
          )}
          {profile.availabilityTimeDetails && (
             <p><strong className="font-medium text-neutral-dark dark:text-dark-text">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°):</strong> {profile.availabilityTimeDetails}</p>
          )}
          {profile.availability && (!availabilityDateDisplay || !profile.availabilityTimeDetails) && ( 
            <p><strong className="font-medium text-neutral-dark dark:text-dark-text">üïí ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏):</strong> {profile.availability}</p>
          )}

          {useBoxStyleForContact ? (
            <div className="mt-2">
              <strong className="font-medium text-neutral-dark dark:text-dark-text">üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</strong>
              <div className="mt-1 text-sm bg-neutral-light dark:bg-dark-inputBg dark:text-dark-text p-3 rounded-md whitespace-pre-wrap border border-neutral-DEFAULT/50 dark:border-dark-border/50">
                {contactText}
              </div>
            </div>
          ) : (
            <p><strong className="font-medium text-neutral-dark dark:text-dark-text">üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</strong> {contactText}</p>
          )}

           <div className="mt-2">
            <strong className="font-medium text-neutral-dark dark:text-dark-text">üìù ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô:</strong>
            <div className="mt-1 text-sm bg-neutral-light dark:bg-dark-inputBg dark:text-dark-text p-3 rounded-md whitespace-pre-wrap h-24 overflow-y-auto font-normal border border-neutral-DEFAULT/50 dark:border-dark-border/50">{profile.details || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}</div>
          </div>

          {profile.username && (
             <p className="text-xs sm:text-sm text-neutral-medium dark:text-dark-textMuted mt-3">
              üìé ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏î‡∏¢: @{profile.username}
            </p>
          )}

          {formattedPostedAt && (
            <p className="text-xs sm:text-sm text-neutral-medium dark:text-dark-textMuted mt-1 pt-2 border-t border-neutral-DEFAULT/30 dark:border-dark-border/20">
              üìÖ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formattedPostedAt}
            </p>
          )}
        </div>
         {isExpired && ( 
          <div className="text-center mt-3 mb-2">
            <span className="bg-red-100 text-red-700 dark:bg-red-700/30 dark:text-red-300 text-xs sm:text-sm px-3 py-1.5 rounded-full font-medium inline-block">
              ‚õî ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            </span>
          </div>
        )}
        <Button 
          onClick={handleContact} 
          variant="secondary" 
          size="md" 
          className="w-full mt-auto"
          disabled={profile.isUnavailable} 
        >
          {profile.isUnavailable ? '‚úÖ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß' : 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ'}
        </Button>
      </div>
      
      <Modal isOpen={isWarningModalOpen} onClose={closeWarningModal} title="‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏°‡∏¥‡∏à‡∏â‡∏≤‡∏ä‡∏µ‡∏û">
        <div className="bg-accent/10 dark:bg-dark-accent-DEFAULT/10 border border-accent/30 dark:border-dark-accent-DEFAULT/30 p-4 rounded-md my-2 text-neutral-dark dark:text-dark-textMuted">
          <p className="mb-2">‡∏´‡∏≤‡∏à‡πä‡∏≠‡∏ö‡∏à‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</p>
          <p className="mb-2 font-semibold text-red-600 dark:text-red-400">‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î</p>
          <p>‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏ó‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÉ‡∏î ‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</p>
        </div>
        <Button onClick={handleProceedToContact} variant="accent" className="w-full mt-4">
          ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß
        </Button>
      </Modal>

      <Modal isOpen={isContactModalOpen} onClose={closeContactModal} title="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢">
        <div className="text-neutral-dark dark:text-dark-textMuted font-normal">
          <p className="mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:</p>
          <div className="bg-neutral-light dark:bg-dark-inputBg p-4 rounded-md border border-neutral-DEFAULT dark:border-dark-border whitespace-pre-wrap">
            <p className="font-semibold text-neutral-dark dark:text-dark-text">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</p>
            <p>{profile.contact}</p>
          </div>
          <Button onClick={closeContactModal} variant="primary" className="w-full mt-6">
            ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
          </Button>
        </div>
      </Modal>
    </>
  );
};